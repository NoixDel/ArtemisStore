<%- include('partials/headers', {page_title: "Param√®tres"}) %>
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- SERVIVE STATUS  -->

<!--
<div class="container my-4">
  <div id="service-card" class="card">
    <div class="card-header text-center">
      <h2>Service Windows ArtemisStore</h2>
    </div>
    <div class="card-body text-center">
      <div class="service-status mb-3">
        <span id="service-status-indicator" class="status-indicator"></span>
        <span id="service-status-text" class="fw-bold">Pas install√©</span>
      </div>
      <div class="service-actions">
        <button id="install-service" class="btn btn-primary mx-2">Installer</button>
        <button id="uninstall-service" class="btn btn-danger mx-2">D√©sinstaller</button>
        <button id="start-service" class="btn btn-success mx-2">D√©marrer</button>
        <button id="stop-service" class="btn btn-warning mx-2">Arr√™ter</button>
      </div>
    </div>
  </div>
</div>
<style>
  .status-indicator {
    display: inline-block;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    margin-right: 8px;
    background-color: black; /* Noir par d√©faut pour "Pas install√©" */
    vertical-align: middle;
  }

  /* Clignotement doux */
  .blink {
    animation: blink-animation 1.5s infinite;
  }

  @keyframes blink-animation {
    0%, 100% {
      box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
    }
    50% {
      box-shadow: 0 0 20px rgba(255, 0, 0, 0.8);
    }
  }
</style>

<script>
  // Gestion du statut et des boutons
  const statusIndicator = document.getElementById('service-status-indicator');
  const statusText = document.getElementById('service-status-text');
  const serviceCard = document.getElementById('service-card');

  const installButton = document.getElementById('install-service');
  const uninstallButton = document.getElementById('uninstall-service');
  const startButton = document.getElementById('start-service');
  const stopButton = document.getElementById('stop-service');

  // Fonction pour mettre √† jour l'√©tat
  function updateStatus(color, text, isActive, isInstalled) {
    statusIndicator.style.backgroundColor = color;
    statusText.textContent = text;

    if (isActive) {
      serviceCard.classList.remove('blink');
      startButton.disabled = true;
      stopButton.disabled = false;
      installButton.disabled = true;
      uninstallButton.disabled = false;
    } else if (isInstalled) {
      serviceCard.classList.add('blink');
      startButton.disabled = false;
      stopButton.disabled = true;
      installButton.disabled = true;
      uninstallButton.disabled = false;
    } else {
      serviceCard.classList.add('blink');
      startButton.disabled = true;
      stopButton.disabled = true;
      installButton.disabled = false;
      uninstallButton.disabled = true;
    }
  }

  // Fonction CheckServiceStatus
  function checkServiceStatus() {
    window.electron.send('check-service-status', {});

    // √âcoute des √©v√©nements IPC pour mettre √† jour l'√©tat
    window.electron.on('service-status', (msg) => {
      //alert(msg.status);
      if (msg.status === 'RUNNING') {
        updateStatus('green', 'Actif', true, true);
      } else if (msg.status === 'NOT_FOUND') {
        updateStatus('black', 'Pas install√©', false, false);
      } else if (msg.status === 'STOPPED') {
        updateStatus('red', 'Inactif', false, true);
      }
    });
  }
  // Initialisation au chargement de la page
  document.addEventListener('DOMContentLoaded', () => {
    // √âtat initial : "Pas install√©"
    updateStatus('black', 'Pas install√©', false, false);

    checkServiceStatus();
    setInterval(checkServiceStatus, 5000); // V√©rifie le statut toutes les 5 secondes
  });

  // Gestion des boutons
  installButton.addEventListener('click', () => {
    window.electron.send('service-action-install', { });
    checkServiceStatus();
  });
  uninstallButton.addEventListener('click', () => {
    window.electron.send('service-action-uninstall', { });
    checkServiceStatus();
  });

  startButton.addEventListener('click', () => {
    window.electron.send('service-action-start', { });
    checkServiceStatus();
  });

  stopButton.addEventListener('click', () => {
    window.electron.send('service-action-stop', { });
    checkServiceStatus();
  });
</script>
-->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->

<div class="container mt-4">
    <h2 class="mb-4">Param√®tres de l'application</h2>

    <!-- <div class="mb-3">
        <label for="theme" class="form-label">Th√®me</label>
        <select id="theme" class="form-select">
            <option value="dark">Sombre</option>
            <option value="light">Clair</option>
        </select>
    </div>

    <div class="mb-3">
        <label for="language" class="form-label">Langue</label>
        <input type="text" id="language" class="form-control" placeholder="fr, en...">
    </div> -->

    <div class="mb-3">
        <label for="autoUpdate" class="form-label">Mise √† jour automatique</label>
        <select id="autoUpdate" class="form-select">
            <option value="true">Activ√©e</option>
            <option value="false">D√©sactiv√©e</option>
        </select>
    </div>

    <div class="mb-3">
        <label for="AllwaysShowTerminal" class="form-label">Afficher le terminal </label>
        <select id="AllwaysShowTerminal" class="form-select">
            <option value="true">Oui - Afficher le terminal √† chaque fois</option>
            <option value="false">Non - Laisser par d√©faut</option>
        </select>
    </div>
    <div id="status" class="form-text text-success mt-3"></div>
</div>

<script>
    // Requ√™te des param√®tres
    window.electron.send('get-settings');

    window.electron.on('settings-data', (settings) => {
        // document.getElementById('theme').value = settings.theme;
        // document.getElementById('language').value = settings.language;
        document.getElementById('autoUpdate').value = settings.autoUpdate.toString();
        document.getElementById('AllwaysShowTerminal').value = settings.AllwaysShowTerminal.toString();
    });

    window.electron.on('setting-updated', ({ key, value }) => {
        const status = document.getElementById('status');
        status.textContent = `‚úîÔ∏è ${key} mis √† jour`;
        setTimeout(() => status.textContent = '', 1500);
    });

    // Sauvegarde imm√©diate sur changement
    // document.getElementById('theme').addEventListener('change', (e) => {
    //     window.electron.send('update-setting', 'theme', e.target.value);
    // });

    // document.getElementById('language').addEventListener('input', (e) => {
    //     window.electron.send('update-setting', 'language', e.target.value);
    // });

    document.getElementById('autoUpdate').addEventListener('change', (e) => {
        window.electron.send('update-setting', 'autoUpdate', e.target.value === 'true');
    });

    document.getElementById('AllwaysShowTerminal').addEventListener('change', (e) => {
        window.electron.send('update-setting', 'AllwaysShowTerminal', e.target.value === 'true');
    });
</script>

<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->
<!-- #################################################################################################### -->

<div class="container mt-4">
  <h2 class="mb-4">Winget</h2>
  <div class="card">
    <div class="card-header text-center">
      <h3>Gestion de Winget</h3>
    </div>
    <div class="card-body text-center">
      <p>Winget est un gestionnaire de paquets pour Windows. Il permet d'installer, de mettre √† jour et de g√©rer des applications via la ligne de commande.
      Si vous rencontrez des probl√®mes avec Winget, vous pouvez utiliser les boutons ci-dessous pour r√©parer les sources, mettre √† jour le client Winget ou effectuer un test de fonctionnement.
      </p>
      <button id="winget-fix" class="btn btn-warning mx-2">üîß R√©parer les sources</button>
      <button id="winget-update" class="btn btn-primary mx-2">‚¨ÜÔ∏è Mettre √† jour Winget</button>
      <button id="winget-test" class="btn btn-success mx-2">üñ•Ô∏è Test Winget</button>
    </div>
  </div>
  <div id="winget-status" class="form-text text-success mt-3"></div>
</div>

<script>
  const wingetStatus = document.getElementById('winget-status');
  const fixBtn = document.getElementById('winget-fix');
  const updateBtn = document.getElementById('winget-update');
  const testBtn = document.getElementById('winget-test');

  fixBtn.addEventListener('click', () => {
    window.electron.send('winget-fix-sources', {});
    wingetStatus.textContent = "‚è≥ R√©paration des sources en cours...";
  });

  updateBtn.addEventListener('click', () => {
    window.electron.send('winget-update-client', {});
    wingetStatus.textContent = "‚è≥ Mise √† jour de Winget en cours...";
  });

  testBtn.addEventListener('click', () => {
    window.electron.send('winget-test', {});
    wingetStatus.textContent = "‚è≥ Test en cours... (une fen√™tre CMD va s‚Äôouvrir)";
  });

  window.electron.on('winget-status-msg', (msg) => {
    wingetStatus.textContent = msg;
    setTimeout(() => wingetStatus.textContent = '', 3000);
  });
</script>


<%- include('partials/footers') %>

